// src/app/api/summarize/route.ts
import { NextResponse } from 'next/server';
import { scrapeBlogContent } from '@/lib/scraping';
import { simulateAISummary } from '@/lib/summarizer';
import { translateToUrdu } from '@/lib/translator';
import { saveSummaryToSupabase, saveFullTextToMongoDB } from '@/lib/db';
import { getGeminiSummaryAndKeywords, translateTextWithGemini } from '@/lib/gemini-ai';

export async function POST(request: Request) {
  try {
    const {
      url,
      summarizationMethod,
      translationMethod,
      summaryLength,
      summaryStyle,
      targetLanguage,
    } = await request.json();

    if (!url) {
      return NextResponse.json({ error: 'URL is required' }, { status: 400 });
    }

    try {
      new URL(url);
    } catch (error) {
      console.error('URL validation error:', error);
      return NextResponse.json({ error: 'Invalid URL format' }, { status: 400 });
    }

    console.log(`Processing request for URL: ${url}`);
    console.log(`Summarization Method: ${summarizationMethod}, Translation Method: ${translationMethod}, Target Language: ${targetLanguage}`);
    console.log(`Summary Length: ${summaryLength}, Summary Style: ${summaryStyle}`);

    const fullText = await scrapeBlogContent(url);
    if (!fullText) {
      return NextResponse.json({ error: 'Could not scrape content from the provided URL. The page might be empty, protected, or structured differently.' }, { status: 400 });
    }
    console.log('Blog content scraped successfully.');

    let englishSummary: string;
    let keywords: string[];

    if (summarizationMethod === 'ai') {
      console.log('Calling Google Gemini API for summarization...');
      try {
        const geminiResult = await getGeminiSummaryAndKeywords(fullText, summaryLength, summaryStyle);
        englishSummary = geminiResult.summary;
        keywords = geminiResult.keywords;
        console.log('Summary and keywords generated by Gemini AI.');
      } catch (geminiError: any) {
        console.error('Error with Gemini summarization:', geminiError);
        return NextResponse.json({ error: `AI summarization failed: ${geminiError.message || 'Unknown error'}` }, { status: 500 });
      }
    } else { // summarizationMethod === 'static'
      console.log('Using static logic for summarization...');
      const simulatedResult = simulateAISummary(fullText);
      englishSummary = simulatedResult.summary;
      keywords = simulatedResult.keywords;
      console.log('Summary and keywords generated by static logic.');
    }

    if (!englishSummary || englishSummary === 'No content to summarize.') {
        return NextResponse.json({ error: 'Failed to generate summary from scraped content.' }, { status: 500 });
    }

    let translatedSummary: string;
    let finalTargetLanguageCode: string;
    let finalTranslationMethodUsed: string;

    if (translationMethod === 'api') {
        console.log(`Calling Google Gemini API to translate to: ${targetLanguage}`);
        try {
            translatedSummary = await translateTextWithGemini(englishSummary, targetLanguage);
            finalTargetLanguageCode = targetLanguage;
            finalTranslationMethodUsed = 'gemini_api';
            console.log('Summary translated by Gemini AI.');
        } catch (translationError: any) {
            console.error('Error with Gemini translation API:', translationError);
            translatedSummary = translateToUrdu(englishSummary);
            finalTargetLanguageCode = 'ur';
            finalTranslationMethodUsed = 'dictionary_fallback_gemini_failed';
            console.warn('Gemini Translation API failed, falling back to JS Dictionary translation.');
        }
    } else { // translationMethod === 'dictionary'
        console.log('Using JS Dictionary for translation...');
        translatedSummary = translateToUrdu(englishSummary);
        finalTargetLanguageCode = 'ur';
        finalTranslationMethodUsed = 'dictionary';
        console.log('Summary translated by JS Dictionary.');
    }

    let summaryId: string | undefined; 
    // Save summary to Supabase
    try {
      summaryId = await saveSummaryToSupabase({ 
        original_url: url,
        english_summary: englishSummary,
        urdu_summary: translatedSummary,
        api_translated_summary: translatedSummary,
        target_language_code: finalTargetLanguageCode,
        translation_method_used: finalTranslationMethodUsed,
        keywords: keywords,
        is_favorite: false,
      });
      console.log('Summary saved to Supabase with ID:', summaryId);
    } catch (dbError) {
      console.error('Failed to save to Supabase:', dbError);
    }

    // Save full text to MongoDB
    try {
      await saveFullTextToMongoDB(url, fullText);
      console.log('Full text saved to MongoDB.');
    } catch (dbError) {
      console.error('Failed to save to MongoDB:', dbError);
    }

    // Return the summarized data
    return NextResponse.json({
      original_url: url,
      english_summary: englishSummary,
      urdu_summary: translatedSummary,
      target_language_code: finalTargetLanguageCode,
      translation_method_used: finalTranslationMethodUsed,
      keywords: keywords,
      summarizationMethod,
      translationMethod,
      is_favorite: false, 
      id: summaryId, 
    }, { status: 200 });

  } catch (error: unknown) {
    console.error('API Error:', error);
    return NextResponse.json({ error: `Internal Server Error: ${error instanceof Error ? error.message : String(error)}` }, { status: 500 });
  }
}